Curso: https://www.youtube.com/watch?v=wLH1Vv86I44&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=1&ab_channel=LucasSouzaDev


criando projeto com CRA e typescript: npx create-react-app dash-one --template typescript

Padronização de projeto: https://www.youtube.com/watch?v=L5nJhLkvBxU&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=2&ab_channel=LucasSouzaDev

DICA: No vídeo acima aprendemos a publicar um repositório a partir do própio vs code

Estruturando pastas: https://www.youtube.com/watch?v=88EEdbp98mM&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=3&ab_channel=LucasSouzaDev


Instalando React Router Dom v6: https://www.youtube.com/watch?v=44QQtoEy3ik&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=4&ab_channel=LucasSouzaDev

- Doc oficial: https://reactrouter.com/en/main/start/overview
- Serve para o roteamento, ou seja criar páginas na nossa aplicação
- Comando para instalar: yarn add react-router-dom@6
- Após instalado é só seguir a doc para configurar o projeto de acordo com ela.
- Básicamente alteramos o App.tsx para chamar o contexto do browser router

Instalando Material UI 5: https://www.youtube.com/watch?v=1JWGiAnR4C0&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=5&ab_channel=LucasSouzaDev

- Doc oficial: https://mui.com/material-ui/getting-started/installation/
- Comando para instalar: yarn add @mui/material @emotion/react @emotion/styled
- Adicionamos os links de fonts e icones em public/index.html
- Comando para usar icones SVG (recomendação React): yarn add @mui/icons-material


Configurando tema no MUI: https://www.youtube.com/watch?v=NcGt1dYM1sQ&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=6&ab_channel=LucasSouzaDev

- Fomos na pasta src/shared/themes criamos um index.ts, Light.ts e um Dark.ts
- No light.ts configuramos o padrão de cores para o tema light
- No dark.ts configuramos o padrão de cores para o tema dark
- Como usar o tema ? Agora vamos no nosso src/App.tsx e envolvemos todo o código do return dentro de um <ThemeProvider theme={funçãoDoTema} ><ThemeProvider/>


Atualizando React 17 para 18: https://www.youtube.com/watch?v=Q05x706QWhE&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=7&ab_channel=LucasSouzaDev

- comando: yarn add react react-dom
- comando yarn add @types/react @types/react-dom


Configurando tema escuro e a troca de tema: 
- Criamos o Dark.ts em src/shared/themes
- Chamamos ele no index.ts do mesmo caminho
- Em src/shared/contexts criamos o arquivo ThemeContext.tsx e nele criamos o contexto do Theme para ser usada em outras partes do sistema
- Depois exportamos o ThemeContext no index do mesmo caminho
- Em src/routes usamos o context criado para o tela e chamamos a função toggleTheme dentro de um button no onclick, onde esse button serve para alterar o tema
- Em src/App.tsx envolvemos todo o código com o context criado
- Em public/index.html no body adicionamos margin 0 e padding 0 para resolver bugs de scroll background


Criando menu lateral: https://www.youtube.com/watch?v=9OdXDXY5RAQ&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=10&ab_channel=LucasSouzaDev
- Usar componente Drawer do MUI: https://mui.com/material-ui/react-drawer/
- Em components criamos o MenuLateral.tsx (src/shared/components/menu-lateral/MenuLateral.tsx)
- Nele usamos os devidos componentes para criar o menu lateral, nesse arquivo recebemos um children, que no caso esse children será a página renderizada na direita
- Em src/App.tsx importamos nosso MenuLateral e colocamos nosso AppRoutes dentro dele, agr o AppRoutes será a children do MenuLateral
- Feito isso o menu lateral sempre vai se manter fixo e na direita poderá ser renderizado várias páginas de acordo com o projeto


Drawer responsivo: https://www.youtube.com/watch?v=bFxJ0-F2Hl4&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=11&ab_channel=LucasSouzaDev
- No MUI5 pesquisamos por useMediaQuery() e vimos suas propriedades. Esse hook serve para trabalhar com responsividade em React
- No MenuLateral.tsx chamamos o useMediaQuery com suas devidas propriedades
- No Drawer inserimos as validações
- Depois criamos um context chamado DraweContext.tsx e nele fizemos a lógica necessária e importamos no index.ts da pasta contexts
- Dentro do nosso App.tsx envolvemos todos os import dentro do nosso DrawerProvider para que ele tenha efeito sobre todos os componentes children futuros
- No index do routes apenas usamos o context criado e adicionamos a funcionalidade no botão

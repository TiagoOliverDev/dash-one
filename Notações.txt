Curso: https://www.youtube.com/watch?v=wLH1Vv86I44&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=1&ab_channel=LucasSouzaDev


criando projeto com CRA e typescript: npx create-react-app dash-one --template typescript

Padronização de projeto: https://www.youtube.com/watch?v=L5nJhLkvBxU&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=2&ab_channel=LucasSouzaDev

DICA: No vídeo acima aprendemos a publicar um repositório a partir do própio vs code

Estruturando pastas: https://www.youtube.com/watch?v=88EEdbp98mM&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=3&ab_channel=LucasSouzaDev


Instalando React Router Dom v6: https://www.youtube.com/watch?v=44QQtoEy3ik&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=4&ab_channel=LucasSouzaDev

- Doc oficial: https://reactrouter.com/en/main/start/overview
- Serve para o roteamento, ou seja criar páginas na nossa aplicação
- Comando para instalar: yarn add react-router-dom@6
- Após instalado é só seguir a doc para configurar o projeto de acordo com ela.
- Básicamente alteramos o App.tsx para chamar o contexto do browser router

Instalando Material UI 5: https://www.youtube.com/watch?v=1JWGiAnR4C0&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=5&ab_channel=LucasSouzaDev

- Doc oficial: https://mui.com/material-ui/getting-started/installation/
- Comando para instalar: yarn add @mui/material @emotion/react @emotion/styled
- Adicionamos os links de fonts e icones em public/index.html
- Comando para usar icones SVG (recomendação React): yarn add @mui/icons-material


Configurando tema no MUI: https://www.youtube.com/watch?v=NcGt1dYM1sQ&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=6&ab_channel=LucasSouzaDev

- Fomos na pasta src/shared/themes criamos um index.ts, Light.ts e um Dark.ts
- No light.ts configuramos o padrão de cores para o tema light
- No dark.ts configuramos o padrão de cores para o tema dark
- Como usar o tema ? Agora vamos no nosso src/App.tsx e envolvemos todo o código do return dentro de um <ThemeProvider theme={funçãoDoTema} ><ThemeProvider/>


Atualizando React 17 para 18: https://www.youtube.com/watch?v=Q05x706QWhE&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=7&ab_channel=LucasSouzaDev

- comando: yarn add react react-dom
- comando yarn add @types/react @types/react-dom


Configurando tema escuro e a troca de tema: 
- Criamos o Dark.ts em src/shared/themes
- Chamamos ele no index.ts do mesmo caminho
- Em src/shared/contexts criamos o arquivo ThemeContext.tsx e nele criamos o contexto do Theme para ser usada em outras partes do sistema
- Depois exportamos o ThemeContext no index do mesmo caminho
- Em src/routes usamos o context criado para o tela e chamamos a função toggleTheme dentro de um button no onclick, onde esse button serve para alterar o tema
- Em src/App.tsx envolvemos todo o código com o context criado
- Em public/index.html no body adicionamos margin 0 e padding 0 para resolver bugs de scroll background


Criando menu lateral: https://www.youtube.com/watch?v=9OdXDXY5RAQ&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=10&ab_channel=LucasSouzaDev
- Usar componente Drawer do MUI: https://mui.com/material-ui/react-drawer/
- Em components criamos o MenuLateral.tsx (src/shared/components/menu-lateral/MenuLateral.tsx)
- Nele usamos os devidos componentes para criar o menu lateral, nesse arquivo recebemos um children, que no caso esse children será a página renderizada na direita
- Em src/App.tsx importamos nosso MenuLateral e colocamos nosso AppRoutes dentro dele, agr o AppRoutes será a children do MenuLateral
- Feito isso o menu lateral sempre vai se manter fixo e na direita poderá ser renderizado várias páginas de acordo com o projeto


Drawer responsivo: https://www.youtube.com/watch?v=bFxJ0-F2Hl4&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=11&ab_channel=LucasSouzaDev
- No MUI5 pesquisamos por useMediaQuery() e vimos suas propriedades. Esse hook serve para trabalhar com responsividade em React
- No MenuLateral.tsx chamamos o useMediaQuery com suas devidas propriedades
- No Drawer inserimos as validações
- Depois criamos um context chamado DraweContext.tsx e nele fizemos a lógica necessária e importamos no index.ts da pasta contexts
- Dentro do nosso App.tsx envolvemos todos os import dentro do nosso DrawerProvider para que ele tenha efeito sobre todos os componentes children futuros
- No index do routes apenas usamos o context criado e adicionamos a funcionalidade no botão


Opções do drawer: https://www.youtube.com/watch?v=63chTxv8MPM&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=12&ab_channel=LucasSouzaDev
- No nosso MenuLateral.tsx criamos uma outra function ListItemLink() que será responsável por retornar as opções de menu de forma dinâmica
- No DraweContext.tsx criamos a função handleSetDrawerOptions() que de fato seta essas opções de menu
- E no index do routes dentro de um useEffect estamos usando setDrawerOptions para setar as opções de menu desejada


Criando layout base para as páginas: https://www.youtube.com/watch?v=AGapA_SvEWs&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=13&ab_channel=LucasSouzaDev
- fomos em src/shared/layouts e criamos o componente LayoutBaseDePagina.tsx e nele criamos a base do layout
- no index src/shared/layouts importamos o componente LayoutBaseDePagina
- em src/pages criamos o componente dashboard e nele chamamos o LayoutBaseDePagina e dentro dele podemos passar o conteúdo children
- em src/pages importamos o componente dashboard criado
- em src/routes importamos o Dashboard dentro do parâmetro element do router /pagina-inicial


Layout base responsivo: https://www.youtube.com/watch?v=OGLN3GTh2Yg&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=14&ab_channel=LucasSouzaDev
- criado configuração de responsividade base no LayoutBaseDePagina


Configurando troca de tema dark e light: https://www.youtube.com/watch?v=5FLodwUf2kA&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=15&ab_channel=LucasSouzaDev
- Adicionado funcionalidade de alternar tema no final do menu lateal em src/shared/components/menu-lateral/MenuLateral.tsx
- Adicionado estilização de constraste de tema para textos e icon em src/shared/themes/Dark.ts

Barra de ferramentas da listagem: https://www.youtube.com/watch?v=CIGU9trS3G4&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=16&ab_channel=LucasSouzaDev
- src/shared/components/barra-de-ferramentas/BarraDeFerramentas.tsx criamos o componente BarraDeFerramentas e toda sua lógica
- importamos ele no seu devido index
- em src/pages/dashboard/Dashboard.tsx chamamos ele


Ferramentas de detalhe: https://www.youtube.com/watch?v=U1Y-XYQcLOg&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=17&ab_channel=LucasSouzaDev
- Criação do src/shared/components/ferramentas-de-detalhe/FerramentasDeDetalhe.tsx para criar os botões da dash


 Atributos nos botões da ferramentas de detalhe: https://www.youtube.com/watch?v=r1-9Tj0qO0I&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=18&ab_channel=LucasSouzaDev
- Em src/shared/components/ferramentas-de-detalhe/FerramentasDeDetalhe.tsx criamos uma interface com atributos e eventos dos nossos botões


 Adicionando o skeleton do Material UI: https://www.youtube.com/watch?v=jPSeDOyPAmY&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=19&ab_channel=LucasSouzaDev
- No mesmo arquivo FerramentasDeDetalhe.tsx na interface criamos novos atributos para cada botão para vermos ele carregando atravez do skeleton
- Criamos um skeleton para cada botão e editamos sua altura e largura
- condicionamos cada botão com o skeleton
- em src/pages/dashboard/Dashboard.tsx no componente importato "FerramentasDeDetalhe" teremos vários parâmetros de botões carregando e useEffect


Como configurar componente Responsivo React com Material UI: https://www.youtube.com/watch?v=jnT_NZXREiI&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=20&ab_channel=LucasSouzaDev
- Em src/shared/components/ferramentas-de-detalhe/FerramentasDeDetalhe.tsx foi inserido algumas validações referente a responsividade dos botões


Criando um backend rápido com Json Server: https://www.youtube.com/watch?v=BLmEyAzu5qc&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=21&ab_channel=LucasSouzaDev
- Dica: deixar o json server na dependências do projeto, pois ao dar yarn install ele já irá instalar
- Criamos a pasta mock na raiz do projeto e dentro dela um README.MD ensinando como usar o json server e um database.json que será o arquivo q o json server irá utilizar
- instalar com: yarn add -D json-server
- ativar com: yarn run json-server -w -p 3333 ./mock/database.json
- ir em package.json em "scripts" e adicionar "mock": "json-server -w -p 3333 ./mock/database.json", com isso podemos rodar apenas com yarn mock


Como configurar o axios no React: https://www.youtube.com/watch?v=t0RjS2aNgus&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=22&ab_channel=LucasSouzaDev
- Axios é uma ferramenta do javascript para consultas no backend (api)
- Instalamos com yarn add axios
- Dentro de src/shared/services/Api criamos uma pasta axios-config e um index.ts dentro dela onde fizemos a config inicial do axios
- Ainda em src/shared/services/Api/axios-config criamos uma pasta interceptors onde temos dois arquivos para interceptar mensagens de erro e sucesso da api consultada.


Como configurar variáveis ambiente no React: https://www.youtube.com/watch?v=L1H_Nwll6m8&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=23&ab_channel=LucasSouzaDev
- Em src/shared/environment no index.ts criamos um objeto Environment e nele criamos variaveis de ambientes que serão reutilizadas em diversos lugares do projeto


Isolando acesso ao backend: https://www.youtube.com/watch?v=-2QNW-tFlVo&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=24&ab_channel=LucasSouzaDev
- Em src/shared/services/api criamos uma pasta pessoas e dentro dela o arquivo PessoasService.ts onde nesse arquivo iniciamos a lógica do crud


Finalizando os services de acesso ao backend: https://www.youtube.com/watch?v=dUuqBaDGajI&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=25&ab_channel=LucasSouzaDev
- Em src/shared/services/api/pessoas/PessoasService.ts finalizamos a lógica dos métodos de interação com o backend (CRUD)


Criando tela de cidades: https://www.youtube.com/watch?v=ECQ4QWObNAE&list=PL29TaWXah3iaqOejItvW--TaFr9NcruyQ&index=26&ab_channel=LucasSouzaDev
- Em pages criamos a pasta cidades e o arquivo ListagemDeCidade.tsx e importamos no index.ts do pages
- Em ListagemDeCidade.tsx criamos de fato nosso componente de listagem onde importamos o LayoutBaseDePagina e FerramentasDaListagem
- Detalhe importante é que habilitamos a URL para capturar o que for digitado no campo de busca com useSearchParams(), para caso o usuário queira enviar a url com uma determinada cidade já pesquisada.
- Em routes criamos sua rota /cidades